Description: Deploys webservers to an AutoScaling Group with a load balancer

Parameters:
  DesiredCapacity:
    Description: desired capacity of auto scaling group containing web servers
    Type: Number
    Default: 2
  InstanceSubnets:
    Description: List of VPC subnets that instances can be launched in
    Type: CommaDelimitedList
  InstanceType:
    Description: EC2 instance type used for the webserver instances
    Type: String
    Default: t2.micro
  Environment:
    Description: Name of the application environment
    Type: String
    AllowedValues:
      - dev
      - live
    Default: dev
    ConstraintDescription: specify either dev or live

Conditions:
  IsLiveEnvironment: !Equals [ !Ref Environment, live ]

Resources:
  webserverLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
        -
          Protocol: HTTP
          LoadBalancerPort: 80
          InstancePort: 80
      SecurityGroups:
        - !Sub ${loadBalancerSecurityGroup.GroupId}
      Subnets: !Ref InstanceSubnets

  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: access the load balancer
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80

  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref DesiredCapacity
      LaunchConfigurationName: !Ref launchConfiguration
      LoadBalancerNames:
        - !Ref webserverLoadBalancer
      MaxSize: !If [IsLiveEnvironment, 4, 2]
      MinSize: !If [IsLiveEnvironment, 2, 0]
      VPCZoneIdentifier: !Ref InstanceSubnets

  launchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []

          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !FindInMap [ ImageIdByRegion, !Ref 'AWS::Region', AMI ]
      InstanceType: !Ref InstanceType
      KeyName: km
      SecurityGroups:
        - !Sub ${securityGroup.GroupId}
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r launchConfiguration --region ${AWS::Region} -v

  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: access web application
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          SourceSecurityGroupId: !Sub ${loadBalancerSecurityGroup.GroupId}
          FromPort: 80
          ToPort: 80


Mappings:
  ImageIdByRegion:
    ap-south-1:
      AMI: ami-7c87d913
    us-east-1:
      AMI: ami-1853ac65


Outputs:
  webserverURL:
    Value: !Sub ${webserverLoadBalancer.DNSName}
